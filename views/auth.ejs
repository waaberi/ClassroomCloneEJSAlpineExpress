<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Authentication Page</title>
        <script src="/js/alpine.min.js" defer></script>
        <script src="/js/tailwind.min.js"></script>
    </head>
    <body x-data="{ isSignin: false, message: '', error: false, isDragging: false, dropMessage: 'Drag and drop an image or click to select', file: 'empty' }" :class="{ 'bg-blue-100': isDragging, 'bg-gray-100': !isDragging }">
        <div class="flex items-center justify-center min-h-screen">
            <div class="bg-white shadow-md rounded px-8 py-6 overflow-auto" style="width: 30rem;">
                <h2 class="text-2xl font-bold mb-4" x-text="isSignin ? 'Sign In' : 'Sign Up'">Authentication</h2>
                <div x-show="isSignin">
                    <form id="signinContainer" x-on:submit.prevent="submitForm" enctype="multipart/form-data">
                        <div class="mb-4">
                            <label for="email" class="block text-gray-700 text-sm font-bold mb-2">Email:</label>
                            <input type="email" id="email" name="email" required class="border rounded px-3 py-2 w-full">
                        </div>
                        <div class="mb-4">
                            <label for="password" class="block text-gray-700 text-sm font-bold mb-2">Password:</label>
                            <input type="password" id="password" name="password" required class="border rounded px-3 py-2 w-full">
                        </div>
                        <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">Sign In</button>
                    </form>
                </div>
                <div x-show="!isSignin">
                    <form id="signupContainer" x-on:submit.prevent="submitForm" enctype="multipart/form-data">
                        <div class="mb-4">
                            <label for="firstname" class="block text-gray-700 text-sm font-bold mb-2">First Name:</label>
                            <input type="text" id="firstName" name="firstName" required class="border rounded px-3 py-2 w-full">
                        </div>
                        <div class="mb-4">
                            <label for="lastname" class="block text-gray-700 text-sm font-bold mb-2">Last Name:</label>
                            <input type="text" id="lastName" name="lastName" required class="border rounded px-3 py-2 w-full">
                        </div>
                        <div class="mb-4">
                            <label for="email" class="block text-gray-700 text-sm font-bold mb-2">Email:</label>
                            <input type="email" id="email" name="email" required class="border rounded px-3 py-2 w-full">
                        </div>
                        <div class="mb-4">
                            <label for="password" class="block text-gray-700 text-sm font-bold mb-2">Password:</label>
                            <input type="password" id="password" name="password" required class="border rounded px-3 py-2 w-full">
                        </div>
                        <div class="mb-4">
                            <label for="role" class="block text-gray-700 text-sm font-bold mb-2">Role:</label>
                            <select id="role" name="role" required class="border rounded px-3 py-2 w-full">
                                <option value="student">Student</option>
                                <option value="teacher">Teacher</option>
                            </select>
                        </div>
                        <div class="mb-4">
                            <label for="profilePicture" class="block text-gray-700 text-sm font-bold mb-2">Profile Picture:</label>
                            <div class="relative border rounded px-3 py-2 w-full" @dragover="handleDragOver" @dragleave="handleDragLeave" @drop="handleDrop">
                                <input type="file" id="profilePicture" name="profilePicture" accept="image/*" class="absolute inset-0 opacity-0 w-full h-full cursor-pointer" @change="fileThere = true">
                                <div class="flex items-center justify-center">
                                    <svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                                    </svg>
                                    <span class="ml-2 text-gray-700" x-text="dropMessage"></span>
                                </div>
                            </div>
                        </div>
                        <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">Sign Up</button>
                    </form>
                </div>
                <p class="text-sm text-center mt-4">
                    <span x-text="isSignin ? 'Need an account?' : 'Already have an account?'"></span>
                    <a href="#" x-on:click="isSignin=!isSignin" x-text="isSignin ? 'Sign Up' : 'Sign In'"></a>
                </p>
                <p id="message" x-text="message" x-bind:class="{ 'text-red-500': error, 'text-green-500': !error }" class="text-center font-bold mt-2"></p>
                <script>
                    function app() {
                        return {
                            // Gère l'événement de survol par un élément glissé
                            handleDragOver(e) {
                                e.preventDefault();
                                this.isDragging = true;
                                this.dropMessage = 'Dropping...';
                            },
                            // Gère l'événement de sortie d'un élément glissé
                            handleDragLeave() {
                                this.isDragging = false;
                                this.dropMessage = 'Drag and drop an image or click to select';
                            },
                            // Gère l'événement de dépôt d'un élément
                            handleDrop(e) {
                                e.preventDefault();
                                this.isDragging = false;
                                this.file = e.dataTransfer.files[0];
                                this.dropMessage = 'File dropped successfully!';
                            },
                        }
                    }

                    // Destructure les méthodes de l'objet retourné par la fonction app
                    const { handleDragLeave, handleDragOver, handleDrop } = app();

                    // Fonction asynchrone pour soumettre le formulaire
                    async function submitForm() {
                        // Sélectionne le formulaire approprié en fonction du mode (inscription ou connexion)
                        const form = document.querySelector(this.isSignin ? '#signinContainer' : '#signupContainer');
                        // Crée un nouvel objet FormData à partir du formulaire
                        const formData = new FormData(form);
                        // Si un fichier a été déposé, l'ajoute à l'objet FormData
                        if (this.file) formData.append('profilePicture', this.file);
                        try {
                            // Envoie une requête POST au serveur avec les données du formulaire
                            const response = await fetch(`/auth/${this.isSignin ? 'signin' : 'signup'}`, {
                                method: 'POST',
                                body: formData
                            });

                            // Si la réponse est OK, met à jour l'état de l'application
                            if (response.ok) {
                                this.error = false;
                                this.message = (await response.json()).message;
                                // Si l'utilisateur est en train de se connecter, le redirige vers la page d'accueil
                                if (this.isSignin) setTimeout(() => window.location.href = "/", 500);
                                // Sinon, passe en mode connexion
                                else this.isSignin = true;
                            } else {
                                // Si la réponse n'est pas OK, affiche un message d'erreur
                                this.error = true;
                                this.message = (await response.json()).message;
                            }
                        } catch (error) {
                            // En cas d'erreur lors de l'envoi de la requête, affiche un message d'erreur
                            this.error = true;
                            this.message = error.message;
                        }
                    }
                </script>
            </div>
        </div>
    </body>
</html>
